{% extends "partials/base" %}

{% block title %}Homepage{% endblock title %}

{% block content %}
<h1>Description</h1>
<p>This program is used for sending and processing messages of file, image and text.
    It has two modes in which it can be started - client and server.</p>

<h1>Setup</h1>
<p>You need to install diesel and diesel_cli:</p>
<pre><code>cargo install diesel_cli</code></pre>
<p>Then copy <code>.env.dist</code> to <code>.env</code> and set your database. You need to have <code>sqlite3</code> installed:</p>
<pre><code>sudo apt-get install sqlite3 libsqlite3-dev</code></pre>
<p>Then run:</p>
<pre><code>diesel migration run</code></pre>
<p>This will create a test user for using with the application. Migrations are located in the <code>./migrations/</code> folder.</p>

<h2>Usage</h2>
<p>The program can be started in two versions: client and server. For communication, you need to start the server first and then the client.
    Both versions require you to provide the IP on which the server/client will be listening for connections.</p>
<p>The program provides logging via the <code>log</code> crate which outputs colored information into the CLI.
    You can control log output using the <code>RUST_LOG</code> environment variable (e.g., set to <code>debug</code>, which is also the default).</p>

<h2>Client</h2>
<p>After starting the client:</p>
<ul>
    <li>You will be asked to provide the server IP and port (default: <code>localhost:111</code>).</li>
    <li>Then, provide a correct user from the database (e.g., the <code>test</code> user).</li>
    <li>You can then select the type of message to send:
        <ul>
            <li><strong>image</strong> – provide a path to any image; it will be sent to the server and saved by all clients to <code>./images/</code></li>
            <li><strong>file</strong> – provide a path to any file; it will be sent and saved by clients to <code>./files/</code></li>
            <li><strong>text</strong> – enter any text; it will be sent and displayed as output</li>
            <li><strong>quit</strong> – exit the program</li>
        </ul>
    </li>
</ul>

<h2>Server</h2>
<p>After starting the server, you need to provide the IP and port (default: <code>localhost:1111</code>).
    The server will be ready to listen for connections. A TCP server and a web server will be started together.</p>

<h2>Web Server</h2>
<p>To set up the web server, copy <code>Rocket.toml.dist</code> to <code>Rocket.toml</code> and run the application in <code>web</code> mode.</p>

<h2>Metrics</h2>
<p>You can view application stats using Prometheus:</p>
<ol>
    <li>Start Prometheus using Docker:
        <pre><code>docker compose up -d</code></pre>
    </li>
    <li>Prometheus will be available at <code>localhost:9090</code>.</li>
    <li>Configure Prometheus to scrape metrics from your app:
        <ul>
            <li>Go to <strong>Status → Targets</strong>.</li>
            <li>Add a new target with URL: <code>http://host.docker.internal:8000/metrics</code></li>
        </ul>
    </li>
</ol>

<h2>Testing</h2>
<p>Run all tests across the workspace using:</p>
<pre><code>cargo test --workspace</code></pre>
<p>Ensure your database is set up first (see the <strong>Setup</strong> section).</p>

<h2>Export Documentation</h2>
<p>Generate source code documentation with:</p>
<pre><code>cargo doc --open --no-deps --workspace</code></pre>
<p>The output will be in <code>./target/doc/help.html</code>, or you can browse <code>./target/doc/*</code> for specific libraries or crates.</p>
{% endblock content %}